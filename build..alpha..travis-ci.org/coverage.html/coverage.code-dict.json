{"/home/travis/build/npmtest/node-npmtest-temporal/test.js":"/* istanbul instrument in package npmtest_temporal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-temporal/lib.npmtest_temporal.js":"/* istanbul instrument in package npmtest_temporal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_temporal = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_temporal = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-temporal/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-temporal && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_temporal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_temporal\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_temporal.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_temporal.rollup.js'] =\n            local.assetsDict['/assets.npmtest_temporal.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_temporal.__dirname + '/lib.npmtest_temporal.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-temporal/node_modules/temporal/lib/temporal.js":"if (!Object.assign || !Map) {\n  require(\"es6-shim\");\n}\n\n\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\n\n// All APIs will be added to `exportable`, which is lastly\n// assigned as the value of module.exports\nvar exportable = new Emitter();\n\n// Object containing callback queues, keys are time in MS\nvar queue = {};\n\n// Actively processing queue\nvar isProcessing = false;\n\n// Task details are stored as a plain object, privately in a Map\n// to avoid being forced to expose the properties directly on the instance.\n//\n// Queue emitters are stored privately in a Map to avoid using\n// |this| alias patterns.\nvar priv = new Map();\n\nvar tick = global.setImmediate || process.nextTick;\n\n/**\n * Task create a temporal task item\n * @param {Object} entry Options for entry {time, task}\n */\nfunction Task(entry) {\n  if (!(this instanceof Task)) {\n    return new Task(entry);\n  }\n\n  this.called = 0;\n  this.now = this.calledAt = Date.now();\n\n  priv.set(this, entry);\n\n  // Side table property definitions\n  entry.isRunnable = true;\n  entry.later = this.now + entry.time;\n\n\n  if (!queue[entry.later]) {\n    queue[entry.later] = [];\n  }\n\n  // console.log( entry.later, this );\n  queue[entry.later].push(this);\n}\n\n// Inherit EventEmitter API\nutil.inherits(Task, Emitter);\n\n/**\n * Task.deriveOp (reduction)\n * (static)\n */\nTask.deriveOp = function(p, v) {\n  return v !== \"task\" ? v : p;\n};\n\n\n/**\n * stop Stop the current behaviour\n */\nTask.prototype.stop = function() {\n  priv.get(this).isRunnable = false;\n  this.emit(\"stop\");\n};\n\nfunction Queue(tasks) {\n  priv.set(this, []);\n\n  this.add(tasks);\n}\n\nutil.inherits(Queue, Emitter);\n\nQueue.prototype.stop = function() {\n  priv.get(this).forEach(function(ref) {\n    ref.stop();\n  });\n\n  this.emit(\"stop\");\n};\n\nQueue.prototype.add = function(tasks) {\n  var thisq = this;\n  var op, item, task, ref, refs;\n\n  this.cumulative = this.cumulative || 0;\n\n  refs = priv.get(this);\n\n  while (tasks.length) {\n    item = tasks.shift();\n    op = Object.keys(item).reduce(Task.deriveOp, \"\");\n    // console.log( op, item[ op ] );\n    this.cumulative += item[op];\n\n    // For the last task, ensure that an \"end\" event is\n    // emitted after the final callback is called.\n    if (tasks.length === 0) {\n      task = item.task;\n      item.task = function(temporald) {\n        task.call(thisq, temporald);\n\n        // Emit the end event _from_ within the _last_ task\n        // defined in the Queue tasks. Use the |tasks| array\n        // object as the access key.\n        thisq.emit(\"end\", temporald);\n\n        // Reset on last one in the queue\n        thisq.cumulative = 0;\n      };\n    }\n\n    if (op === \"loop\" && tasks.length === 0) {\n      // When transitioning from a \"delay\" to a \"loop\", allow\n      // the loop to iterate the amount of time given,\n      // but still start at the correct offset.\n      ref = exportable.delay(this.cumulative - item[op], function() {\n        ref = exportable.loop(item[op], item.task);\n\n        refs.push(ref);\n      });\n    } else {\n      ref = exportable[op](this.cumulative, item.task);\n    }\n\n    refs.push(ref);\n  }\n};\n\nexportable.queue = function(tasks) {\n  var queue = new Queue(tasks);\n  processQueue();\n  return queue;\n};\n\n\n// For more information about this approach:\n//\n//    https://dl.dropbox.com/u/3531958/empirejs/index.html\n//\n\nvar previousTime = Date.now();\n\nfunction processQueue() {\n\n  if (!isProcessing) {\n    isProcessing = true;\n    exportable.emit(\"busy\");\n  }\n\n\n  var scheduled = Object.keys(queue);\n  var last = scheduled.length && +scheduled[scheduled.length - 1];\n  var now = Date.now();\n  var entries = [];\n  var callProcessQueue = true;\n  var entry, temporald, i;\n\n  // Nothing scheduled, don't call processQueue again\n  if (last <= now) {\n    callProcessQueue = false;\n  }\n\n  for (i = previousTime; i <= now; i++) {\n    // Accumlate entries\n    [].push.apply(entries, queue[i] || []);\n  }\n\n  if (entries.length) {\n\n    // console.log( now, entries );\n    // console.log( entries );\n    while (entries.length) {\n      // Shift the entry out of the current list\n      temporald = entries.shift();\n      entry = priv.get(temporald);\n\n      // Execute the entry's callback, with\n      // \"entry\" as first arg\n      if (entry.isRunnable) {\n        temporald.called++;\n        temporald.calledAt = now;\n        entry.task.call(temporald, temporald);\n      }\n\n      // Additional \"loop\" handling\n      if (entry.type === \"loop\" && entry.isRunnable) {\n        // There is an active loop, so keep the\n        // processQueue active.\n        callProcessQueue = true;\n\n        // Calculate the next execution time\n        entry.later = now + entry.time;\n\n        // Create a queue entry if none exists\n        if (!queue[entry.later]) {\n          queue[entry.later] = [];\n        }\n\n        if (entry.isRunnable) {\n          // Push the entry into the cue\n          queue[entry.later].push(temporald);\n        }\n      }\n    }\n\n    // Cleanup\n    for (i = previousTime; i <= now; i++) {\n      delete queue[i];\n    }\n\n    entries.length = 0;\n  }\n\n  previousTime = now;\n\n  if (callProcessQueue) {\n    tick(processQueue);\n  } else {\n    isProcessing = false;\n    exportable.emit(\"idle\");\n  }\n}\n\n[\"loop\", \"delay\"].forEach(function(type) {\n  exportable[type] = function(time, operation) {\n    if (typeof time === \"function\") {\n      operation = time;\n      time = 10;\n    }\n    var task = new Task({\n      time: time,\n      type: type,\n      task: operation\n    });\n\n    if (!isProcessing) {\n      processQueue();\n    }\n\n    return task;\n  };\n});\n\n// Alias \"delay\" as \"wait\" or \"defer\" (back compat with old compulsive API)\n// These aid only in user code that desires clarity in purpose.\n// Certain practical applications might be suited to\n// \"defer\" or \"wait\" vs. \"delay\"\n//\nexportable.wait = exportable.defer = exportable.delay;\n\nexportable.repeat = function(n, ms, callback) {\n  return exportable.loop(ms, function(context) {\n    callback(context);\n\n    if (context.called === n) {\n      this.stop();\n    }\n  });\n};\n\nexportable.clear = function() {\n  isProcessing = false;\n  exportable.removeAllListeners();\n  queue = {};\n};\n\nmodule.exports = exportable;\n","/home/travis/build/npmtest/node-npmtest-temporal/node_modules/temporal/Gruntfile.js":"\"use strict\";\nmodule.exports = function(grunt) {\n  function readOptionalJSON( filepath ) {\n    var data = {};\n    try {\n      data = grunt.file.readJSON( filepath );\n    } catch(e) {}\n    return data;\n  }\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: \"<json:package.json>\",\n    nodeunit: {\n      files: [\"test/**/*.js\"]\n    },\n    jshint: {\n      all: {\n        src: [\"grunt.js\", \"lib/**/*.js\", \"test/**/*.js\"],\n        options: readOptionalJSON(\".jshintrc\")\n      }\n    },\n    jsbeautifier: {\n      files: [\"lib/**/*.js\", \"eg/**/*.js\", \"test/**/*.js\"],\n      options: {\n        js: {\n          braceStyle: \"collapse\",\n          breakChainedMethods: false,\n          e4x: false,\n          evalCode: false,\n          indentChar: \" \",\n          indentLevel: 0,\n          indentSize: 2,\n          indentWithTabs: false,\n          jslintHappy: false,\n          keepArrayIndentation: false,\n          keepFunctionIndentation: false,\n          maxPreserveNewlines: 10,\n          preserveNewlines: true,\n          spaceBeforeConditional: true,\n          spaceInParen: false,\n          unescapeStrings: false,\n          wrapLineLength: 0\n        }\n      }\n    },\n    watch: {\n      src: {\n        files: [\n          \"Gruntfile.js\",\n          \"lib/**/*.js\",\n          \"test/**/*.js\"\n        ],\n        tasks: [\"default\"],\n        options: {\n          interrupt: true,\n        },\n      }\n    }\n  });\n  grunt.loadNpmTasks(\"grunt-contrib-jshint\");\n  grunt.loadNpmTasks(\"grunt-contrib-watch\");\n  grunt.loadNpmTasks(\"grunt-contrib-nodeunit\");\n  grunt.loadNpmTasks(\"grunt-jsbeautifier\");\n  // Default task.\n  grunt.registerTask( \"default\", [ \"jsbeautifier\", \"jshint\", \"nodeunit\" ] );\n\n\n};\n","/home/travis/build/npmtest/node-npmtest-temporal/node_modules/temporal/lib/timeout.js":"var count = 0;\nvar stamps = [];\n\nsetTimeout(function tick() {\n  stamps[count++] = Date.now();\n\n  if (count === 1000) {\n    console.log(stamps);\n    process.exit(0);\n  } else {\n    setTimeout(tick, 0);\n  }\n\n}, 0);\n","/home/travis/build/npmtest/node-npmtest-temporal/node_modules/temporal/uvrun.js":"var run = require(\"uvrun\").run;\n\n// Do something here, like make a server to keep the event loop busy\n// var TCP = process.binding(\"tcp_wrap\").TCP;\n// var server = new TCP();\n// server.onconnection = function () {\n//   console.log(\"connection!\");\n// };\n// server.bind(\"0.0.0.0\", 3000);\n// server.listen(511);\n\n\n// process.maxTickDepth = Infinity;\n// process.nextTick(function tick() {\n\n//   console.log(\"nextTick\", Date.now());\n\n//   process.nextTick(tick);\n// });\n\n\n// setInterval(function() {\n//   console.log(Date.now());\n// }, 0);\n\n// Visualize each event loop tick using a custom event loop.\n// console.log(\"Waiting for events...\");\n// do {\n//   var ret = run();\n//   console.log(\"tick\", Date.now());\n//   process.exit(0);\n// } while(ret);\n\n\n// process.maxTickDepth = Infinity;\n\n// process.nextTick(function tick() {\n\n//   console.log(\"tick\", Date.now());\n\n//   process.nextTick(tick);\n// });\n\n\n\n// function tick(operation) {\n//   var now = Date.now();\n\n//   if (tick.last === now) {\n//     console.log(\"calling nextTick\");\n//     process.nextTick(function() {\n//       tick(operation);\n//       operation();\n//     });\n//   } else {\n//     console.log(\"calling setTimeout\");\n//     operation();\n//     setTimeout(function() {\n//       tick(operation);\n\n//     }, 0);\n//   }\n// }\n\n// tick.last = Date.now();\n\n// tick(function() {\n//   console.log(Date.now());\n// })\n"}